var swapper = exports;
var crypto = require('crypto');
var signature = require('cookie-signature');
// var MobileDetect = require('mobile-detect'); 
var spdy = require('spdy'); // CookieStoreをspdyに作成しているのでそれにアクセスするため

//NOTE: use 'Mobile-Detect'
// var md = new MobileDetect();

//
// ### function uid(len)
// #### @len {Number} UID length
// Generate UID
// NOTE: Copy paste from 'connect'
//
function uid(len) {
	return crypto.randomBytes(Math.ceil(len * 3 / 4)).toString('base64').slice(0, len);
}

//
// ### function parseSetCookie(arrCookie)
// #### @arrCookie {Object} Set-Cookie header value
// Parse Set-Cookie header and return Cookie association array.
// 引数のCookieに対してcookieの値と属性を含むobjectを返す関数
// objCookie[cookieName] = {				
//  value: cookieValue,					
//  attributes: cookieAttributes		
// };
//
function parseSetCookie(arrCookie) {
	var objCookie = {};		//Cookie association array
	for(var i=0; i<arrCookie.length; i++) {
		var cookieAttributes = {}; // object
		var pairs = arrCookie[i].split(';');	
		
		for(var j=0; j<pairs.length; j++) {
			var pair = pairs[j].split('=');	
			
			if(j === 0) {
				var cookieName = pair[0].trim();			
				var cookieValue = (pair[1] || '').trim();	
			} else {
				cookieAttributes[pair[0].trim().toLowerCase()] = (pair[1] || '').trim(); // 属性名：属性値となるobjectを作成
			}
		}
		
		objCookie[cookieName] = {				
			value: cookieValue,					
			attributes: cookieAttributes		
		};
	}
	
	return objCookie;
}

//
// ### function frameSetCookie(objCookie)
// #### @objCookie {Object} Cookie association array
// Build Set-Cookie header based on Cookie association array.
//
function frameSetCookie(objCookie) {
	var arrCookie = new Array();	// Set-Cookie header value

	Object.keys(objCookie).forEach(function(i) {
		var strCookie = (i + '=' + objCookie[i].value + '; ');

		Object.keys(objCookie[i].attributes).forEach(function(j) {
			if(j === 'secure' || j === 'httponly') {
				strCookie += (j + '; ');
			} else {
				strCookie += (j + '=' + objCookie[i].attributes[j] + '; ');
			}
		});

		arrCookie.push(strCookie.slice(0, -2));
	});
	
	return arrCookie;
}

//
// ### function parseCookie(strCookie)
// #### @strCookie {String} Cookie header value
// Parse Cookie header and return Cookie association array
//
function parseCookie(strCookie) {
	var objCookie = {};		// Cookie association array
	var pairs = strCookie.split(';');	
	
	for(var i=0; i<pairs.length; i++) {
		var pair = pairs[i].split('=');	
		objCookie[pair[0].trim()] = (pair[1] || '').trim();
	}
	
	return objCookie;
}

//
// ### function frameCookie(objCookie)
// #### @objCookie {Object} Cookie association array
// Build Cookie header based on Cookie association array.
//
function frameCookie(objCookie) {
	var strCookie = '';	// Cookie header value

	Object.keys(objCookie).forEach(function(i) {
		strCookie += (i + '=' + objCookie[i] + '; ');
	});

	return strCookie.slice(0, -2);	
}

//
// ### function Swapper()
// Swapper @constructor
// Swapperのコンストラクタ？
//
function Swapper() {
	// Random character strings used to generate session ID.
	this.secret = uid(12);
	this.SSCookies = {};
	this.CSCookies = {};
}

//
// ### function create()
// @constructor wrapper
// Swapperインスタンスを生成？
//
exports.create = function create() {
	return new Swapper();
};

//
// ### function SwapSforC(headers)
// #### @headers {Object} Response header
// Swap SS Cookie for CS Cookie
// SSCookieをCSCookieに変換するメソッドswapSforCを定義。
// functionの後ろのswapSforC必要？
//
Swapper.prototype.swapSforC = function swapSforC(headers, statusCode) {

  console.log("swapSforC関数の実行");//0805追加
  console.log("statusCode:" + statusCode);

  var self = this;
  for(var i in headers) {
    var headerName = (i || ''); // headerNameにi(ヘッダ名)か''(空文字列)を代入
    if(headerName.toLowerCase() !== 'set-cookie') continue; // headerNameがset-cookieならば下へ続く

    var cookies = parseSetCookie(headers[i]); // set-cookieをオブジェクト化する
    //console.log("parseSetCookie(serverから送られてきたcookie):" + cookies); // cookiesの中身の確認

    // Object.keys(cookies)はcookiesのnamesプロパティの配列を返す
    // [value, attributes]
    // Array.forEach(function(j){});は与えられた関数を配列の各要素に対して1度ずつ実行する
    Object.keys(cookies).forEach(function(j) { 
      
      //Cookie flag
      //Cookieの変換を行うかの基準
      //Cookieの属性にexpiresがないかつmax-ageがないかつhttponlyがあるときにtrueを保持
      var criteria = (
        !cookies[j].attributes['expires'] &&
        !cookies[j].attributes['max-age'] &&
        cookies[j].attributes.hasOwnProperty('httponly')
      );

      //console.log("cookieの属性:" + cookies[j].attributes);//0807追加
      
      //console.log("provisonalreferer:" + spdy.store[cookies[j]].provisonalreferer); provisonalrefererの手前がundefinedらしい
      //console.log(cookies[j].attributes['path']);//0807追加 パスは取れる　これをrefererにいれれればよさそう
      //console.log(spdy.store[cookies[j]].ua);//0807追加　spdy.storeにrefererを入れたいがなぜかcan't set headers after they are sentエラーが起こる
      //refererを記憶
      //spdy.store[cookies[j]].referer = cookies[j].attributes['path'];//0807追加
      //console.log("referer:" + spdy.store[cookies[j]].referer);//0807追加

      //statusCodeが200ならばguessrefererにprovisonalrefererを代入
      if(statusCode === 200) {
        spdy.store[self.CSCookies[j]].guessreferer = spdy.store[self.CSCookies[j]].provisonalreferer;
      }

      console.log("----------");
      console.log(spdy.store[self.CSCookies[j]]);
      console.log("----------");

      if(self.SSCookies.hasOwnProperty(j) && criteria) {
        // The SS Cookie is pre-stored,　
        // Cookie store flag is true and 
        // it is not an access from a mobile device.

        // Load CS Cookie
        cookies[j].value = self.CSCookies[j];

      }else if(self.SSCookies.hasOwnProperty(j)){
        // The SS Cookie is pre-stored and Cookie store flag is false.
        // Delete CS Cookie
        delete self.CSCookies[j]; 

      }else if(criteria){
        // The SS Cookie isn't stored,
        // Cookie store flag is true and 
        // it is not an access from a mobile device.

        var ss_value = cookies[j].value;
        self.SSCookies[j] = ss_value;

        var cs_value = 'c:' + signature.sign(uid(24), self.secret);

        self.CSCookies[j] = cs_value;

        spdy.store[cs_value] = {"ss" : ss_value};

        cookies[j].value = cs_value;
      }
    });

    // Rebuild Set-Cookie header
    headers[i] = frameSetCookie(cookies);
    break;
  }
};

//
// ### function SwapCforS(headers)
// #### @headers {Object} request header
// Swap CS Cookie for SS Cookie
// CSCookieをSSCookieに変換するメソッドswapSforCを定義。
// functionの後ろのswapCforS必要？
//
Swapper.prototype.swapCforS = function swapCforS(headers, ip) {

  console.log("swapCforS関数の実行");//0805追加  

  var self = this;

  //ヘッダからCookieヘッダを検索
  for(var i in headers) {
    
    //console.log("ヘッダからcookieヘッダを検索");

    var headerName = (i || '');

    //Cookieヘッダ以外は終了
    if(headerName.toLowerCase() !== 'cookie') {
      //console.log("ヘッダ名:" + headerName.toLowerCase());
      //console.log("cookieヘッダじゃないので次のヘッダへ");
      continue; 
    }

    //Cookieヘッダに含まれるCookieの連想配列を生成
    var cookies = parseCookie(headers[i]);
    console.log("CS Cookie:" + headers[i]);

    // jは通信に含まれている各cookieを示す？
    Object.keys(cookies).forEach(function(j) {

      //StoreにCookieが記憶されている場合      SSCokieが保存されていない場合？
      //一回目の通信で要素を記憶するために実行する
      //cookiesは複数のcookieを含む可能性のあるオブジェクト？配列？
      //spdy.storeが該当するCookieを持っているならif文を実行する。
      //該当しないCookieを持っていない場合これより下は意味ない？

      // CSCookieを初めて利用するときユーザ情報が記憶されていないので記憶する。
      // また、refererの更新を行う。
      // 実行する条件はStoreが該当するCSCookieを持っていた場合。
      // 一度記憶してすれば、IPアドレスとUAは更新しない。
      if(spdy.store.hasOwnProperty(cookies[j])){
	      console.log("referer:" + headers["referer"]);//0805追加
    	  spdy.store[cookies[j]].referer = headers["referer"];//0807追加
        console.log("新たに格納したreferer:" + spdy.store[cookies[j]].referer);//0807追加
        //console.log(":scheme:" + headers[":scheme"]);
        
        //仮のrefererを記憶
        spdy.store[cookies[j]].provisonalreferer = headers[":scheme"] + "://" + headers[":authority"] + headers[":path"];
        console.log("provisonalreferer:" + spdy.store[cookies[j]].provisonalreferer);
        //guessrefererを初期化
        spdy.store[cookies[j]].guessreferer = 0;

        //対応する送信元IPアドレスが記憶されていない場合、送信元IPアドレスを記憶
        if(!spdy.store[cookies[j]].hasOwnProperty('ip')){
          spdy.store[cookies[j]].ip = ip;
          console.log("IP:" + spdy.store[cookies[j]].ip);//0805追記
        }

        //対応するUser-Agentが記憶されていない場合、User-Agentを記憶
        if(!spdy.store[cookies[j]].hasOwnProperty('ua')){
          spdy.store[cookies[j]].ua = headers["user-agent"];
          console.log("UA:" + spdy.store[cookies[j]].ua);//0805追記
        }

        //対応するアクセス時間が記憶されていない場合、アクセス時間を記憶
        if(!spdy.store[cookies[j]].hasOwnProperty('time')){
          spdy.store[cookies[j]].time = Date.now();
          console.log("TIME:" + spdy.store[cookies[j]].time);//0805追記
        }
      }

      //TCPコネクションが切れているかどうかをSwapperで確認
      //CS CookieがSwapperに記憶されている場合
      if(self.CSCookies.hasOwnProperty(j)){
	      console.log("CScookieがSwapperに記憶されている");//0805追加
        //記憶されているCS CookieとCookieヘッダに含まれるCS Cookieが一致する場合
        if(cookies[j] === self.CSCookies[j]){

          //対応するSS Cookieと交換
          cookies[j] = self.SSCookies[j]; 
	        console.log("対応するSScookieと交換");//0805追加

        //記憶されているCS CookieとCookieヘッダに含まれるCS Cookieが一致しない場合
        //一致しないとかある？
        }else{

          //Cookieを削除
          delete cookies[j];
	        console.log("CScookieが一致しないため削除");//0805追加

        }

      //CS CookieがSwapperに記憶されていない場合
      }else{
	      console.log("CScookieがSwapperに記憶されていない");//0805追加
        //Storeに記憶されているCS Cookieを検索
        Object.keys(spdy.store).forEach(function(k) {
	        console.log("storeに記憶されているCScookieを検索")
          //対象のCS Cookieが記憶されていない場合、終了
          if(cookies[j] !== k) return;

          //対象のCS Cookieが記憶されている場合
          if(cookies[j] === k) {

            //前回のアクセスから10分以内、
            //かつ送信元IPアドレスがStoreに記憶した送信元IPアドレスと一致する
            //かつUser-AgentがStoreに記憶したUser-Agentと一致する場合
	          //かつrefererがStoreに記憶したrefererと一致する場合
            if(Date.now() < spdy.store[k].time + 10*60*1000 
              && ip === spdy.store[k].ip
              && headers['user-agent'] === spdy.store[k].ua
	            && heraders['referer'] === spdy.store[k].referer){//0807追記
 
              //SwapperにCS CookieとSS Cookieを記憶
              self.CSCookies[j] = cookies[j];
              self.SSCookies[j] = spdy.store[k].ss;

              //対応するSS Cookieと交換
	            console.log("referer:" + headers["referer"]);//0805追加
              cookies[j] = spdy.store[k].ss;

              //Storeに記憶した情報を更新
              spdy.store[k].time = Date.now();

            //条件を1つでも満たさない場合
            }else{

              //Storeに記憶してある対象のCookieを削除
              delete k;
            }
          }
        });
      }

      //Cookieヘッダを再構築
      headers[i] = frameCookie(cookies);
      console.log("SS Cookie:" + headers[i]);

    });
  }
};

